# File: api/openapi/auth.yaml
openapi: 3.0.3
info:
  title: Pluto Auth Service API
  version: "1.0.0"

paths:
  /auth/app-login:
    post:
      operationId: AppLogin
      summary: "Получить JWT по фингерпринту приложения"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppLoginRequest"
      responses:
        "200":
          description: "Успешная аутентификация"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppLoginResponse"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

#  /auth/app-logout:
#    post:
#      operationId: AppLogout
#      summary: "Отозвать JWT (logout)"
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/AppLogoutRequest"
#      responses:
#        "204":
#          description: "Успешный logout"
#        "400":
#          description: "Неверный запрос"
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/ErrorResponse"
#        "404":
#          description: "Сессия не найдена"
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/ErrorResponse"
#        "500":
#          description: "Внутренняя ошибка сервера"
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/ErrorResponse"

  /auth/public-key:
    get:
      operationId: GetPublicKey
      summary: "Вернуть публичный ключ в PEM"
      responses:
        "200":
          description: "PEM-encoded public key"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicKeyResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /health:
    get:
      operationId: Health
      summary: "Health check"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"

components:
  schemas:
    AppLoginRequest:
      type: object
      required:
        - device_id
        - os
        - app_version
      properties:
        device_id:
          type: string
          description: "Уникальный идентификатор устройства (например, UUID)"
        os:
          type: string
          description: "Информация об ОС (например, \"macOS 14.1\")"
        app_version:
          type: string
          description: "Версия приложения (например, \"1.2.3\")"
        additional:
          type: object
          additionalProperties:
            type: string
          description: "Дополнительная информация (архитектура, регион и т.п.)"
    AppLoginResponse:
      type: object
      required:
        - access_token
        - expires_in
        - session_id
      properties:
        access_token:
          type: string
          description: "JWT для запросов к API"
        expires_in:
          type: integer
          format: int32
          description: "Срок жизни токена в секундах"
        session_id:
          type: string
          format: uuid
          description: "UUID сессии, которую можно использовать при logout"
    AppLogoutRequest:
      type: object
      required:
        - session_id
        - jti
      properties:
        session_id:
          type: string
          format: uuid
          description: "UUID сессии, которую нужно отозвать"
        jti:
          type: string
          description: "JWT ID (jti) из access_token"
    PublicKeyResponse:
      type: object
      required:
        - public_key
      properties:
        public_key:
          type: string
          description: "PEM-encoded public key"
    HealthResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: "ok"
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: "Описание ошибки"