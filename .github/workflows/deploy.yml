name: Build & Deploy Pluto Services

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  # Образа будут публиковаться в GHCR
  AUTH_IMAGE: ghcr.io/${{ secrets.GHCR_USERNAME }}/pluto-auth
  MANIFEST_IMAGE: ghcr.io/${{ secrets.GHCR_USERNAME }}/pluto-manifest

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1) Получаем исходники
      - uses: actions/checkout@v4

      # 2) Настраиваем Buildx для мультиплатформенной сборки (кэш, SBOM)
      - uses: docker/setup-buildx-action@v3

      # 3) Логинимся в GHCR
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN || github.token }}

      # 4) Кэшируем слои сборки
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 5) Собираем и пушим auth-service
      - name: Build & Push auth-service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/dockerfiles/auth.Dockerfile
          push: true
          tags: |
            ${{ env.AUTH_IMAGE }}:latest
            ${{ env.AUTH_IMAGE }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to:   type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=local,dest=/tmp/.buildx-cache-new
      - name: Move new cache (auth)
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # 6) Собираем и пушим manifest-service
      - name: Build & Push manifest-service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/dockerfiles/manifest.Dockerfile
          push: true
          tags: |
            ${{ env.MANIFEST_IMAGE }}:latest
            ${{ env.MANIFEST_IMAGE }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to:   type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=local,dest=/tmp/.buildx-cache-new
      - name: Move new cache (manifest)
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Используем SSH для деплоя на сервер
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          # Если SSH-клч имеет passphrase, добавьте passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          script: |
            cd ${{ secrets.DOCKER_COMPOSE_DIR }}
            # 1) Логинимся в GHCR
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            # 2) Пуллим свежие образы
            docker pull ${{ env.AUTH_IMAGE }}:latest
            docker pull ${{ env.MANIFEST_IMAGE }}:latest

            # 3) Останавливаем старые контейнеры (если есть)
            docker-compose -f ~/pluto/docker-compose.yml down || true

            # 4) Обновляем в docker-compose.yml теги образов на :latest
            # Предполагается, что в ~/pluto/docker-compose.yml указаны
            #   image: ghcr.io/USERNAME/pluto-auth:latest
            #   image: ghcr.io/USERNAME/pluto-manifest:latest

            # 5) Запускаем сервисы заново
            docker-compose -f ~/pluto/docker-compose.yml up -d

            # 6) Чистим неиспользуемые образы
            docker image prune -f