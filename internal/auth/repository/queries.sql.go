// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repository

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createAppSession = `-- name: CreateAppSession :exec
INSERT INTO app_sessions (id, fingerprint, issued_at, expires_at, jwt_id, revoked)
VALUES ($1, $2, now(), $3, $4, false)
`

type CreateAppSessionParams struct {
	ID          uuid.UUID
	Fingerprint json.RawMessage
	ExpiresAt   time.Time
	JwtID       uuid.UUID
}

func (q *Queries) CreateAppSession(ctx context.Context, arg CreateAppSessionParams) error {
	_, err := q.db.ExecContext(ctx, createAppSession,
		arg.ID,
		arg.Fingerprint,
		arg.ExpiresAt,
		arg.JwtID,
	)
	return err
}

const getActiveAppSessionByDeviceID = `-- name: GetActiveAppSessionByDeviceID :one
SELECT id, jwt_id, expires_at
FROM app_sessions
WHERE (fingerprint ->>'device_id') = $1
  AND revoked = false
  AND expires_at > now()
`

type GetActiveAppSessionByDeviceIDRow struct {
	ID        uuid.UUID
	JwtID     uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) GetActiveAppSessionByDeviceID(ctx context.Context, fingerprint string) (GetActiveAppSessionByDeviceIDRow, error) {
	row := q.db.QueryRowContext(ctx, getActiveAppSessionByDeviceID, fingerprint)
	var i GetActiveAppSessionByDeviceIDRow
	err := row.Scan(&i.ID, &i.JwtID, &i.ExpiresAt)
	return i, err
}

const revokeAppSession = `-- name: RevokeAppSession :exec
UPDATE app_sessions
SET revoked = true
WHERE id = $1
  AND jwt_id = $2
`

type RevokeAppSessionParams struct {
	ID    uuid.UUID
	JwtID uuid.UUID
}

func (q *Queries) RevokeAppSession(ctx context.Context, arg RevokeAppSessionParams) error {
	_, err := q.db.ExecContext(ctx, revokeAppSession, arg.ID, arg.JwtID)
	return err
}
