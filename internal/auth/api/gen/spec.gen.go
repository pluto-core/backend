// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXTW/bRhP+K4t930MCUJLjfBx0cwK3iFM0geXAhzgwaGotM6ZIZrmMIwQCFDmtAzho",
	"2h6LJkDbcwFGsVrGluS/MPuPipmVRVGi7RZoc7Elcnc+nnmemdEL7gTNMPCFryJefcEjZ0c0bfq4LGUg",
	"V0UUBn4k8EEog1BI5Qp6LfA1flCtUPAqj5R0/QZvW+bNZl1EjnRD5QZ+wam2xaV4GrtS1Hn10djYY+vs",
	"WLD1RDgKja3s7eL1nDW+Urv/NVsXW+yeaHFrJjDba8zfgO/hBD7CSHcg1V0YMDiFERzBKaT6JaTsCgwh",
	"gVN8DQPo647FNvhqbfHmrQ1+lVsFSRb4+B2O9UsyPIQ+DHUXErZaW2LQY1t2JG7diKVXZGvXrRdY+w2G",
	"kMIxJHCi38BQH8InBikcjU2n+pV5rbuYFoNjONHf6QNICl2oVoGLXyGF06mb7AqM4IM+1AcwhBEhsHRO",
	"/n6BuZ8RUr2P8f6tvOOoCMV3kMCfWA59gKlCCv2LQozcRmGIMwxDAIxHg7dFPME8sJbnMC+6mHqsJtQc",
	"/XZFi/67SjTpw/+l2OZV/r9KprTKWGYVZHd74tuW0m7NR44GiwJcC3aFvyqexiJS8/p0PFf4atNQSzy3",
	"m6GH10MvVkEp2nO3VckcKarM+HIkHClU3kDturMq1krPbngPRamx7C/LJbVcLzLSkLavNs3jF1z4cRPT",
	"GZt2pKgLX7m2R8ll9gveX1bbKUfWVN6zaVyA4XlNznYcEUWbCk8VcGF9zco3kgSGY6VS7yhsHM9DV4po",
	"0y1S0I+6A30Y6LcM/oCUZJAyFDgckxYS1JR+CX041vswhCNI9DeZF9dXoiEkUQpDzsCfwHtb2FLISyHN",
	"JZ6zlstgHtK2xSPhxNJVrRqS3OB4fylWO4t3qBx3pio7j8Av2DXHmXV0l5mbbJ4VbNsL9hgcwQmihUU4",
	"0ftnLUO/ZSvra+UNjB3PTSlixn3kBCHFeIbZQ+nxKt9RKoyqlYodq50yaaaM4Erf9ioBPqwYaNqZeunx",
	"ImK/RRhj4OjBfPsikE1bGdJwy8xZvLU1Uw90zNto1vW3gyKAcDpBD+nGIIGeaf9ElkR/CymkE1B6+pBw",
	"PMBnKYMezhIaIWcnV9bXSlP0GkGPoDTYzmNuAFWuIio9QFgYpsmWHtzlFn8mZGSivFZeKC8gFEEofDt0",
	"eZVfLy+Ur2G3tNUOIZ/DEZUXmDY2k+9PFDLNPIytTwrBDH7QXZRCD0aQsonqWfbFyJ4U84owGtCw7G/4",
	"dhh6rmOji8rz0t7eXmk7kM1SLD3hO0Fd1K1pRiXQR984djpkAQfPtEAMLNg3yOTdOoITROo+Jrg2lpA0",
	"jfp2UKdJ7AS+wuaLTeayaLLF7LJ5khsJ7byolYwFPTDNjmqwuLBwQTBPIrO7/SPf41ZKzmc3GtqO+vo1",
	"TfccQZNcl0Pm3PgXQ8uvskWhvYM+bX8JKmtq4ZpmDkOJ0akRtnoT5LXPHGSPFIDB9XOkR5XkiW96cdxs",
	"2rJlZosBu6vfoO6N0Iunrd2IcAhQB3uMZiphvOW5TmlXEHkbokCpy/6zoEV95kh39D58pM0Nh9VZv9KH",
	"DAYwgo9634gZ18WufgtDfEBh3atlLR2BHud7jGbzG3u+bRVJ8EuhHlDY5lfCf0Z8WhQL6kXZYJc+1fvw",
	"AQuES6s+hAFmM9lo8Sty6eZnJfx7/RpS+IA/ILIa4d/EIJ9m1E/HhUhoGU+pSrPkeq+7E3LN5ftpki27",
	"gpevZhOKXGY/ZSZTqYCFtFlInDG8+mh+cxqTqEOMwEA/sYerX9F4Kk2TkH4fxZcNed5+3P4rAAD//4U0",
	"fMQcDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
