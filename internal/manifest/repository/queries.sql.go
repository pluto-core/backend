// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repository

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createManifest = `-- name: CreateManifest :one
INSERT INTO manifest (id, version, icon, category, tags,
                      author_name, author_email,
                      meta_created_at)
VALUES ($1, $2, $3, $4, $5,
        $6, $7,
        $8)
RETURNING
    id, version, icon, category, tags,
    author_name, author_email,
    created_at, meta_created_at
`

type CreateManifestParams struct {
	ID            uuid.UUID
	Version       string
	Icon          string
	Category      string
	Tags          []string
	AuthorName    string
	AuthorEmail   string
	MetaCreatedAt time.Time
}

func (q *Queries) CreateManifest(ctx context.Context, arg CreateManifestParams) (Manifest, error) {
	row := q.db.QueryRowContext(ctx, createManifest,
		arg.ID,
		arg.Version,
		arg.Icon,
		arg.Category,
		pq.Array(arg.Tags),
		arg.AuthorName,
		arg.AuthorEmail,
		arg.MetaCreatedAt,
	)
	var i Manifest
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Icon,
		&i.Category,
		pq.Array(&i.Tags),
		&i.AuthorName,
		&i.AuthorEmail,
		&i.CreatedAt,
		&i.MetaCreatedAt,
	)
	return i, err
}

const createManifestContent = `-- name: CreateManifestContent :one
INSERT INTO manifest_content (manifest_id, ui, script, actions, permissions, signature)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING manifest_id, ui, script, actions, permissions, signature
`

type CreateManifestContentParams struct {
	ManifestID  uuid.UUID
	Ui          json.RawMessage
	Script      string
	Actions     json.RawMessage
	Permissions []string
	Signature   string
}

func (q *Queries) CreateManifestContent(ctx context.Context, arg CreateManifestContentParams) (ManifestContent, error) {
	row := q.db.QueryRowContext(ctx, createManifestContent,
		arg.ManifestID,
		arg.Ui,
		arg.Script,
		arg.Actions,
		pq.Array(arg.Permissions),
		arg.Signature,
	)
	var i ManifestContent
	err := row.Scan(
		&i.ManifestID,
		&i.Ui,
		&i.Script,
		&i.Actions,
		pq.Array(&i.Permissions),
		&i.Signature,
	)
	return i, err
}

const deleteManifestByID = `-- name: DeleteManifestByID :exec
DELETE
FROM manifest
WHERE id = $1
`

func (q *Queries) DeleteManifestByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteManifestByID, id)
	return err
}

const deleteManifestContentByID = `-- name: DeleteManifestContentByID :exec
DELETE
FROM manifest_content
WHERE manifest_id = $1
`

func (q *Queries) DeleteManifestContentByID(ctx context.Context, manifestID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteManifestContentByID, manifestID)
	return err
}

const getManifestByID = `-- name: GetManifestByID :one
SELECT id,
       version,
       icon,
       category,
       tags,
       author_name,
       author_email,
       created_at,
       meta_created_at
FROM manifest
WHERE id = $1
`

func (q *Queries) GetManifestByID(ctx context.Context, id uuid.UUID) (Manifest, error) {
	row := q.db.QueryRowContext(ctx, getManifestByID, id)
	var i Manifest
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Icon,
		&i.Category,
		pq.Array(&i.Tags),
		&i.AuthorName,
		&i.AuthorEmail,
		&i.CreatedAt,
		&i.MetaCreatedAt,
	)
	return i, err
}

const getManifestContentByID = `-- name: GetManifestContentByID :one
SELECT manifest_id,
       ui,
       script,
       actions,
       permissions,
       signature
FROM manifest_content
WHERE manifest_id = $1
`

func (q *Queries) GetManifestContentByID(ctx context.Context, manifestID uuid.UUID) (ManifestContent, error) {
	row := q.db.QueryRowContext(ctx, getManifestContentByID, manifestID)
	var i ManifestContent
	err := row.Scan(
		&i.ManifestID,
		&i.Ui,
		&i.Script,
		&i.Actions,
		pq.Array(&i.Permissions),
		&i.Signature,
	)
	return i, err
}

const listManifests = `-- name: ListManifests :many
SELECT id,
       version,
       icon,
       category,
       tags,
       author_name,
       author_email,
       created_at,
       meta_created_at
FROM manifest
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListManifestsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListManifests(ctx context.Context, arg ListManifestsParams) ([]Manifest, error) {
	rows, err := q.db.QueryContext(ctx, listManifests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Manifest
	for rows.Next() {
		var i Manifest
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.Icon,
			&i.Category,
			pq.Array(&i.Tags),
			&i.AuthorName,
			&i.AuthorEmail,
			&i.CreatedAt,
			&i.MetaCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchManifests = `-- name: SearchManifests :many
SELECT m.id,
       m.version,
       m.icon,
       m.category,
       m.tags,
       m.author_name,
       m.author_email,
       m.created_at,
       m.meta_created_at
FROM manifest m
         LEFT JOIN manifest_localizations t
                   ON t.manifest_id = m.id
                       AND t.locale = $2::text
                       AND t.key = 'title'
         LEFT JOIN manifest_localizations d
                   ON d.manifest_id = m.id
                       AND d.locale = $2::text
                       AND d.key = 'description'
WHERE (
          -- empty search string => return everything
          ($1::text = '')
              -- full-text on title+description
              OR to_tsvector('english',
                             coalesce(t.value, '') || ' ' || coalesce(d.value, '')
                 ) @@ plainto_tsquery('english', $1::text)
              -- category ilike
              OR m.category ILIKE '%' || $1::text || '%'
              -- any tag matches
              OR EXISTS (SELECT 1
                         FROM unnest(m.tags) AS tag
                         WHERE tag ILIKE '%' || $1::text || '%')
          )
ORDER BY m.created_at DESC
LIMIT $3::int OFFSET $4::int
`

type SearchManifestsParams struct {
	Column1 string
	Column2 string
	Column3 int32
	Column4 int32
}

func (q *Queries) SearchManifests(ctx context.Context, arg SearchManifestsParams) ([]Manifest, error) {
	rows, err := q.db.QueryContext(ctx, searchManifests,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Manifest
	for rows.Next() {
		var i Manifest
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.Icon,
			&i.Category,
			pq.Array(&i.Tags),
			&i.AuthorName,
			&i.AuthorEmail,
			&i.CreatedAt,
			&i.MetaCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateManifestContent = `-- name: UpdateManifestContent :one
UPDATE manifest_content
SET ui          = $2,
    script      = $3,
    actions     = $4,
    permissions = $5,
    signature   = $6
WHERE manifest_id = $1
RETURNING manifest_id, ui, script, actions, permissions, signature
`

type UpdateManifestContentParams struct {
	ManifestID  uuid.UUID
	Ui          json.RawMessage
	Script      string
	Actions     json.RawMessage
	Permissions []string
	Signature   string
}

func (q *Queries) UpdateManifestContent(ctx context.Context, arg UpdateManifestContentParams) (ManifestContent, error) {
	row := q.db.QueryRowContext(ctx, updateManifestContent,
		arg.ManifestID,
		arg.Ui,
		arg.Script,
		arg.Actions,
		pq.Array(arg.Permissions),
		arg.Signature,
	)
	var i ManifestContent
	err := row.Scan(
		&i.ManifestID,
		&i.Ui,
		&i.Script,
		&i.Actions,
		pq.Array(&i.Permissions),
		&i.Signature,
	)
	return i, err
}
