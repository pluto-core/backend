// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
